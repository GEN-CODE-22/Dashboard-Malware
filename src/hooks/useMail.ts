import { AppDispatch } from "@/redux";
import { LoadMails } from "@/redux/slices/mails";
import { useEffect, useMemo, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import moment from "moment";
import { GridEnrichedColDef } from "@mui/x-data-grid";
import { IMail } from "@/interfaces";
import { StoreApp } from "../redux/store";

export const useMails = () => {
  const { mails } = useSelector((state: StoreApp) => state.mails);

  const dispatch = useDispatch<AppDispatch>();

  const [inicio, setInicio] = useState<Date>(
    moment(new Date().setMonth(new Date().getMonth(), 1)).toDate()
  );

  const [fin, setFin] = useState<Date>(
    moment(new Date().setMonth(new Date().getMonth() + 1, 0)).toDate()
  );

  const cargaMails = (fechaA: Date, fechaB: Date) => {
    dispatch(LoadMails(fechaA, fechaB));
  };

  useEffect(() => {
    cargaMails(inicio, fin);
  }, [inicio, fin]);

  const columns = useMemo<GridEnrichedColDef<IMail>[]>(
    () => [
      {
        field: "ID",
        headerName: "Id",
        width: 80,
        sortable: true,
        editable: false,
        valueGetter: (params) => {
          const mail = params.row;
          return mail.Id;
        },
        renderCell: (params) => {
          const mail = params.row;
          return mail.Id;
        },
      },
      {
        field: "Tipo",
        headerName: "Tipo",
        width: 300,
        sortable: true,
        editable: false,
        type: "string",
        valueGetter: (params) => {
          const mail = params.row;
          return mail.Tipo;
        },
        renderCell: (params) => {
          const mail = params.row;
          return mail.Tipo;
        },
      },
      {
        field: "IpOrigen",
        headerName: "IpOrigen",
        width: 300,
        sortable: true,
        editable: false,
        type: "string",
        valueGetter: (params) => {
          const mail = params.row;
          return mail.IpOrigen;
        },
        renderCell: (params) => {
          const mail = params.row;
          return mail.IpOrigen;
        },
      },
      {
        field: "IpDestino",
        headerName: "IpDestino",
        width: 300,
        sortable: true,
        editable: false,
        type: "string",
        valueGetter: (params) => {
          const mail = params.row;
          return mail.IpDestino;
        },
        renderCell: (params) => {
          const mail = params.row;
          return mail.IpDestino;
        },
      },
      {
        field: "Fecha",
        headerName: "Fecha",
        width: 100,
        sortable: true,
        editable: false,
        type: "date",
        valueGetter: (params) => {
          const mail = params.row;
          return moment(mail.Fecha).format("YYYY-MM-DD");
        },
        renderCell: (params) => {
          const mail = params.row;
          return moment(mail.Fecha).format("YYYY-MM-DD");
        },
      },
      {
        field: "ThreatName",
        headerName: "ThreatName",
        width: 300,
        sortable: true,
        editable: false,
        type: "string",
        valueGetter: (params) => {
          const mail = params.row;
          return mail.ThreatName;
        },
        renderCell: (params) => {
          const mail = params.row;
          return mail.ThreatName;
        },
      },
      {
        field: "Donde",
        headerName: "Donde",
        width: 300,
        sortable: true,
        editable: false,
        type: "string",
        valueGetter: (params) => {
          const mail = params.row;
          return mail.Donde;
        },
        renderCell: (params) => {
          const mail = params.row;
          return mail.Donde;
        },
      },
    ],
    []
  );

  return {
    cargaMails,
    setFin,
    setInicio,
    inicio,
    fin,
    columns,
    mails,
  };
};
