import { IUser } from "@/interfaces";
import { AppDispatch, StoreApp } from "@/redux";
import { loggIn, Logout } from "@/redux/slices/auth";
import { useSession } from "next-auth/react";
import { useRouter } from "next/router";
import { useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";

export const useAuthToken = () => {
  const { status, data } = useSession();

  const { user } = useSelector((state: StoreApp) => state.auth);

  const dispatch = useDispatch<AppDispatch>();

  const closeSesión = () => {
    dispatch(Logout());
  };

  const router = useRouter();

  useEffect(() => {
    if (status !== "loading") {
      if (status === "authenticated") {
        getInve(data.user as IUser);
      } else if (status === "unauthenticated" && status) {
        cerrarSesion();
      }
    }
  }, [status]);

  const cerrarSesion = () => {
    // router.push("/auth/login");
    dispatch(Logout());
  };

  const getInve = async (usr: IUser) => {
    if (!!usr) dispatch(loggIn(usr));
  };

  return {
    user,
    closeSesión,
    status,
    router,
  };
};
