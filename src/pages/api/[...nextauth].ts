import NextAuth, { NextAuthOptions } from "next-auth";
import Credentials from "next-auth/providers/credentials";

import { IUser } from "../../interfaces/IAuth";
import serverGEN from "@/api/genApi";

export const authOptions: NextAuthOptions = {
  providers: [
    Credentials({
      name: "Custom Login",
      credentials: {
        email: { type: "email", label: "Email", placeholder: "Email" },
        password: {
          type: "password",
          label: "Password",
          placeholder: "Contrase√±a",
        },
      },
      async authorize(credencials) {
        try {
          const resp = await serverGEN.post<IUser>("/malware/post", {});

          // ///Si no esta autorizado
          if (resp.status !== 200) throw new Error("Credenciales incorrectos");

          return resp.data as any;
        } catch (error) {
          throw new Error("Credenciales incorrectos");
        }
      },
    }),
  ],
  pages: {
    signIn: "/auth/login",
    newUser: "/auth/register",
    error: "/auth/login",
  },

  session: {
    maxAge: 60 * 5, //1 dias
    strategy: "jwt",
    updateAge: 60, //30 min
  },

  callbacks: {
    async jwt({ token, account, user, profile }) {
      if (account) {
        token.accessToken = account.accessToken;
        switch (account.type) {
          case "credentials":
            token.user = user;
            break;
        }
      }

      return token;
    },

    async session({ session, token, user }) {
      session.user = token.user as any;
      return session;
    },
  },
};

export default NextAuth(authOptions);
