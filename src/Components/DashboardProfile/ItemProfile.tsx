import { Popover, Transition } from "@headlessui/react";
import { UserCircleIcon } from "@heroicons/react/solid";
import Link from "next/link";
import React, { Fragment } from "react";
import { useSelector } from "react-redux";
import { StoreApp } from "../../redux";
import { useAuthToken } from "../../hooks/useAuthToken";

function IconOne() {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      fill="currentColor"
      className="w-6 h-6"
    >
      <path
        fillRule="evenodd"
        d="M18.685 19.097A9.723 9.723 0 0021.75 12c0-5.385-4.365-9.75-9.75-9.75S2.25 6.615 2.25 12a9.723 9.723 0 003.065 7.097A9.716 9.716 0 0012 21.75a9.716 9.716 0 006.685-2.653zm-12.54-1.285A7.486 7.486 0 0112 15a7.486 7.486 0 015.855 2.812A8.224 8.224 0 0112 20.25a8.224 8.224 0 01-5.855-2.438zM15.75 9a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0z"
        clipRule="evenodd"
      />
    </svg>
  );
}

function IconTwo() {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      fill="currentColor"
      className="w-6 h-6"
    >
      <path
        fillRule="evenodd"
        d="M7.5 3.75A1.5 1.5 0 006 5.25v13.5a1.5 1.5 0 001.5 1.5h6a1.5 1.5 0 001.5-1.5V15a.75.75 0 011.5 0v3.75a3 3 0 01-3 3h-6a3 3 0 01-3-3V5.25a3 3 0 013-3h6a3 3 0 013 3V9A.75.75 0 0115 9V5.25a1.5 1.5 0 00-1.5-1.5h-6zm5.03 4.72a.75.75 0 010 1.06l-1.72 1.72h10.94a.75.75 0 010 1.5H10.81l1.72 1.72a.75.75 0 11-1.06 1.06l-3-3a.75.75 0 010-1.06l3-3a.75.75 0 011.06 0z"
        clipRule="evenodd"
      />
    </svg>
  );
}

const solutions = [
  // {
  //   name: "Perfil",
  //   description: "Información de tu perfil",
  //   href: "/profile",
  //   icon: IconOne,
  // },
  {
    name: "Logout",
    description: "Cerrar sesión",
    href: "/close",
    icon: IconTwo,
  },
];

export const ItemProfile = () => {
  const { user } = useAuthToken();

  return (
    <Popover className="relative  left-3">
      {({ open }) => (
        <>
          <Popover.Button
            className={
              "flex flex-col justify-center items-end max-w-full w-full "
            }
          >
            <div className="flex justify-end w-full ml-16">
              <UserCircleIcon
                className={`${open ? "" : "text-opacity-70"}
                   ml-2 h-12 w-12 text-primary transition duration-150    `}
              />
            </div>
            {/* <h3 className="font-gottamBold text-sm text-start text-darked px-2">
              {user?.nombre}
            </h3> */}
          </Popover.Button>
          <Transition
            as={Fragment}
            enter="transition ease-out duration-200"
            enterFrom="opacity-0 translate-y-1"
            enterTo="opacity-100 translate-y-0"
            leave="transition ease-in duration-150"
            leaveFrom="opacity-100 translate-y-0"
            leaveTo="opacity-0 translate-y-1"
          >
            <Popover.Panel className="absolute -left-10  z-10 mt-2 w-screen max-w-xs -translate-x-1/3 transform px-4 sm:px-0 ">
              <div className="overflow-hidden rounded-lg shadow-lg ring-1 ring-black ring-opacity-5">
                <div className="relative grid gap-8 bg-white p-7 grid-cols-1 shadow-md ">
                  <Link
                    className="-m-3 flex items-center rounded-lg p-2 transition duration-150 ease-in-out hover:bg-gray-100 focus:outline-none focus-visible:ring focus-visible:ring-orange-500 focus-visible:ring-opacity-50"
                    href={"/profile"}
                  >
                    <div className="flex h-10 w-10 shrink-0 items-center justify-center text-darked sm:h-8 sm:w-8">
                      <UserCircleIcon aria-hidden="true" />
                    </div>
                    <div className="ml-4">
                      <p className="text-sm font-medium text-gray-900">
                        {user?.Nombre}
                      </p>
                    </div>
                  </Link>

                  {solutions.map((item) => (
                    <Link
                      key={item.name}
                      href={item.href}
                      className="-m-3 flex items-center rounded-lg p-2 transition duration-150 ease-in-out hover:bg-gray-100 focus:outline-none focus-visible:ring focus-visible:ring-orange-500 focus-visible:ring-opacity-50"
                    >
                      <div className="flex h-10 w-10 shrink-0 items-center justify-center text-darked sm:h-8 sm:w-8">
                        <item.icon aria-hidden="true" />
                      </div>
                      <div className="ml-4">
                        <p className="text-sm font-medium text-gray-900">
                          {item.name}
                        </p>
                        <p className="text-sm text-gray-500">
                          {item.description}
                        </p>
                      </div>
                    </Link>
                  ))}
                </div>
              </div>
            </Popover.Panel>
          </Transition>
        </>
      )}
    </Popover>
  );
};
